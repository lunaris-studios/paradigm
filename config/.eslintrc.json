{
	"extends": [
		"airbnb-typescript",
		"plugin:@typescript-eslint/recommended",
		"plugin:eslint-comments/recommended",
		"plugin:jest/recommended",
		"plugin:promise/recommended",
		"plugin:unicorn/recommended",
		"plugin:prettier/recommended",
		"prettier",
		"prettier/react",
		"prettier/@typescript-eslint"
	],
	"plugins": ["@typescript-eslint", "eslint-comments", "jest", "promise", "unicorn"],
	"settings": {
		"import/resolver": {
			"typescript": {}
		}
	},
	"env": {
		"node": true,
		"browser": true,
		"es6": true,
		"jest": true
	},
	"ignorePatterns": [
		"node_modules",
		"dist",
		"lib",
		"fixtures",
		"coverage",
		"__snapshots__",
		"generated"
	],
	"rules": {
		"@typescript-eslint/naming-convetions": [
			"warn",
			{
				"selector": "typeParameter",
				"format": ["StrictPascalCase"],
				"prefix": ["T"]
			},
			{
				"selector": "interface",
				"format": ["StrictPascalCase"],
				"prefix": ["I"]
			}
		],
		"@typescript-eslint/no-empty-interface": "off",
		"@typescript-eslint/no-useless-constructor": "off",
		"max-classes-per-file": "off",
		// Always prefer explicit implementations
		"react/jsx-fragments": ["warn", "element"],
		"react/static-property-placement": [
			"warn",
			"property assignment",
			{
				"defaultProps": "static public field",
				"displayName": "static public field"
			}
		],
		// Too restrictive, writing ugly code to defend against a very unlikely scenario: https://eslint.org/docs/rules/no-prototype-builtins
		"no-prototype-builtins": "off",
		// https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html
		"import/prefer-default-export": "off",
		"import/no-default-export": "error",
		// Too restrictive: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md
		"react/destructuring-assignment": "off",
		// No jsx extension: https://github.com/facebook/create-react-app/issues/87#issuecomment-234627904
		"react/jsx-filename-extension": "off",
		// Use function hoisting to improve code readability
		"no-use-before-define": [
			"error",
			{
				"functions": false,
				"classes": true,
				"variables": true
			}
		],
		// Makes no sense to allow type inferrence for expression parameters, but require typing the response
		"@typescript-eslint/explicit-function-return-type": [
			"error",
			{
				"allowExpressions": true,
				"allowTypedFunctionExpressions": true
			}
		],
		"@typescript-eslint/no-use-before-define": [
			"error",
			{
				"functions": false,
				"classes": true,
				"variables": true,
				"typedefs": true
			}
		],
		// Common abbreviations are known and readable
		"unicorn/prevent-abbreviations": "off"
	}
}
